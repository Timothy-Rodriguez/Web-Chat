{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mini\\\\chat\\\\client\\\\src\\\\components\\\\NewConversationModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport { useContacts } from '../contexts/ContactsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function NewConversationModal() {\n  _s();\n\n  const [selectedContactIds, setSelectedContactIds] = useState([]);\n  const {\n    contacts\n  } = useContacts();\n\n  function handleCheckboxChange(contactId) {\n    setSelectedContactIds(prevSelectedContactIds => {\n      if (prevSelectedContactIds.includes(contactId)) {\n        return prevSelectedContactIds.filter(prevId => {\n          return contactId !== prev;\n        });\n      } else {\n        return [...prevSelectedContactIds, id];\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: \"Create Conversation.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [contacts.map(contact => /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: contact.id,\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            value: selectedContactIds.include(contact.id),\n            label: contact.name,\n            onChange: () => handleCheckboxChange(contact.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 30\n          }, this)\n        }, contact.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 26\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(NewConversationModal, \"jyVAAT9DmIMoVc+PVu4ehBok27w=\", false, function () {\n  return [useContacts];\n});\n\n_c = NewConversationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewConversationModal\");","map":{"version":3,"sources":["C:/Users/User/Desktop/mini/chat/client/src/components/NewConversationModal.js"],"names":["React","useState","Modal","Form","Button","useContacts","NewConversationModal","selectedContactIds","setSelectedContactIds","contacts","handleCheckboxChange","contactId","prevSelectedContactIds","includes","filter","prevId","prev","id","handleSubmit","map","contact","include","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,iBAApC;AACA,SAASC,WAAT,QAA4B,8BAA5B;;;AAEA,eAAe,SAASC,oBAAT,GAAgC;AAAA;;AAE3C,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAeJ,WAAW,EAAhC;;AAEA,WAASK,oBAAT,CAA8BC,SAA9B,EAAyC;AACrCH,IAAAA,qBAAqB,CAACI,sBAAsB,IAAI;AAC5C,UAAIA,sBAAsB,CAACC,QAAvB,CAAgCF,SAAhC,CAAJ,EAAgD;AAC5C,eAAOC,sBAAsB,CAACE,MAAvB,CAA8BC,MAAM,IAAI;AAC3C,iBAAOJ,SAAS,KAAKK,IAArB;AACH,SAFM,CAAP;AAGH,OAJD,MAKK;AACD,eAAO,CAAC,GAAGJ,sBAAJ,EAA4BK,EAA5B,CAAP;AACH;AACJ,KAToB,CAArB;AAUH;;AACD,sBACI;AAAA,4BACI,QAAC,KAAD,CAAO,MAAP;AAAc,MAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD,CAAO,IAAP;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEC,YAAhB;AAAA,mBACKT,QAAQ,CAACU,GAAT,CAAaC,OAAO,iBAChB,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,SAAS,EAAEA,OAAO,CAACH,EAA/B;AAAA,iCACI,QAAC,IAAD,CAAM,KAAN;AAAY,YAAA,IAAI,EAAC,UAAjB;AAA4B,YAAA,KAAK,EAAEV,kBAAkB,CAACc,OAAnB,CAA2BD,OAAO,CAACH,EAAnC,CAAnC;AAA4E,YAAA,KAAK,EAAEG,OAAO,CAACE,IAA3F;AAAiG,YAAA,QAAQ,EAAE,MAAMZ,oBAAoB,CAACU,OAAO,CAACH,EAAT;AAArI;AAAA;AAAA;AAAA;AAAA;AADJ,WAAwCG,OAAO,CAACH,EAAhD;AAAA;AAAA;AAAA;AAAA,gBADJ,CADL,eAMI,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAeH;;GAhCuBX,oB;UAGCD,W;;;KAHDC,oB","sourcesContent":["import React, { useState  } from 'react'\r\nimport { Modal, Form, Button } from 'react-bootstrap'\r\nimport { useContacts } from '../contexts/ContactsProvider'\r\n\r\nexport default function NewConversationModal() {\r\n\r\n    const [selectedContactIds, setSelectedContactIds] = useState([])\r\n    const { contacts } = useContacts()\r\n\r\n    function handleCheckboxChange(contactId) {\r\n        setSelectedContactIds(prevSelectedContactIds => {\r\n            if (prevSelectedContactIds.includes(contactId)) {\r\n                return prevSelectedContactIds.filter(prevId => {\r\n                    return contactId !== prev\r\n                })\r\n            }\r\n            else {\r\n                return [...prevSelectedContactIds, id]\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <Modal.Header closeButton>Create Conversation.</Modal.Header>\r\n            <Modal.Body>\r\n                <Form onSubmit={handleSubmit}>\r\n                    {contacts.map(contact => (\r\n                         <Form.Group controlId={contact.id} key={contact.id}>\r\n                             <Form.Check type='checkbox' value={selectedContactIds.include(contact.id) } label={contact.name} onChange={() => handleCheckboxChange(contact.id)} />\r\n                         </Form.Group>\r\n                    ))}\r\n                    <Button type='submit'>Create</Button>\r\n                </Form>\r\n            </Modal.Body>   \r\n        </>\r\n    )\r\n}\r\n  "]},"metadata":{},"sourceType":"module"}