{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mini\\\\chat\\\\client\\\\src\\\\contexts\\\\ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react'; //import Contacts from '../components/Contacts'\n\nimport useLocalSorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  id,\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useLocalSorage('conversations', []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToCoversation({\n    recipients,\n    text,\n    sender\n  }) {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        send,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }\n\n  function sendMessage(recipients, text) {\n    addMessageToCoversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectConversationIndex: setSelectedConversationIndex,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    createConversation\n  }; //alert(value)\n\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ConversationsProvider, \"m0Pu+DMzWqlNIw2OahM7wUq0D0g=\", false, function () {\n  return [useLocalSorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/Desktop/mini/chat/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalSorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","id","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","addMessageToCoversation","text","sender","madeChange","newMessage","send","newConversations","map","conversation","arrayEquality","sendMessage","formattedConversations","index","recipient","contact","find","name","selected","value","selectConversationIndex","selectedConversation","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\r\n//import Contacts from '../components/Contacts'\r\nimport useLocalSorage from '../hooks/useLocalStorage'\r\nimport { useContacts } from './ContactsProvider'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n    return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({ id, children }) {\r\n    const [conversations, setConversations] = useLocalSorage('conversations', [])\r\n    const [selectedConversationIndex, setSelectedConversationIndex] = useState(0)\r\n    const { contacts } = useContacts()\r\n\r\n    function createConversation(recipients) {\r\n        setConversations(prevConversations => {\r\n            return [...prevConversations, { recipients, messages: [] }]\r\n        })\r\n    }\r\n\r\n    function addMessageToCoversation({ recipients, text, sender }) {\r\n        setConversations(prevConversations => {\r\n            let madeChange = false\r\n            const newMessage = { send, text }\r\n            const newConversations = prevConversations.map(conversation => {\r\n                if (arrayEquality(conversation.recipients, recipients)) {\r\n                    madeChange = true\r\n                    return {\r\n                        ...conversation,\r\n                        messages: [...conversation.messages, newMessage]\r\n                    }\r\n                }\r\n                return conversation\r\n            })\r\n            if (madeChange) {\r\n                return newConversations\r\n            }\r\n            else {\r\n                return [...prevConversations, { recipients, messages:[newMessage]}]\r\n            }\r\n        })\r\n    }\r\n\r\n    function sendMessage(recipients, text) {\r\n        addMessageToCoversation({ recipients, text, sender:id })\r\n    }\r\n    \r\n    const formattedConversations = conversations.map((conversation, index) => {\r\n        const recipients = conversation.recipients.map(recipient => {\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === recipient\r\n            })\r\n            const name = (contact && contact.name) || recipient\r\n            \r\n            return { id:  recipient, name }\r\n        })\r\n        const selected = index === selectedConversationIndex\r\n        return { ...conversation, recipients, selected}\r\n    })\r\n\r\n    const value = {\r\n        conversations: formattedConversations,\r\n        \r\n        selectConversationIndex: setSelectedConversationIndex,\r\n        selectedConversation: formattedConversations[selectedConversationIndex], \r\n        sendMessage,\r\n        createConversation\r\n    }\r\n    //alert(value)\r\n    return (\r\n        <ConversationsContext.Provider value={value}>\r\n            {children}\r\n        </ConversationsContext.Provider>\r\n    )\r\n}\r\n \r\nfunction arrayEquality(a, b) {\r\n    if (a.length !== b.length) return false\r\n\r\n    a.sort()\r\n    b.sort()\r\n\r\n    return a.every((element, index) => {\r\n        return element === b[index]\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}