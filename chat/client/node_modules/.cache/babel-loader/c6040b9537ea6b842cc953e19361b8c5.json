{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mini\\\\chat\\\\client\\\\src\\\\contexts\\\\ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react'; //import Contacts from '../components/Contacts'\n\nimport useLocalSorage from '../hooks/useLocalStorage';\nimport { useContacts } from './ContactsProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useLocalSorage('conversations', []);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  console.log(typeof conversations);\n  const formattedConversations = conversations.map(conversation => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      alert('name:' + name);\n      return {\n        id: recipient,\n        name\n      };\n    });\n    return { ...conversation,\n      recipients\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ConversationsProvider, \"YGk/P07ELrzqmmOB2YvUSnqd/n4=\", false, function () {\n  return [useLocalSorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["C:/Users/User/Desktop/mini/chat/client/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useLocalSorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","children","conversations","setConversations","contacts","createConversation","recipients","prevConversations","messages","console","log","formattedConversations","map","conversation","recipient","contact","find","id","name","alert","value"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC,C,CACA;;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGJ,KAAK,CAACK,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AAC/B,SAAOL,UAAU,CAACG,oBAAD,CAAjB;AACH;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA6C;AAAA;;AAChD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,cAAc,CAAC,eAAD,EAAkB,EAAlB,CAAxD;AACA,QAAM;AAAES,IAAAA;AAAF,MAAeR,WAAW,EAAhC;;AAEA,WAASS,kBAAT,CAA4BC,UAA5B,EAAwC;AACpCH,IAAAA,gBAAgB,CAACI,iBAAiB,IAAI;AAClC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAE;AAAxB,OAAvB,CAAP;AACH,KAFe,CAAhB;AAGH;;AAEDC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAOR,aAAnB;AACA,QAAMS,sBAAsB,GAAGT,aAAa,CAACU,GAAd,CAAkBC,YAAY,IAAI;AAC7D,UAAMP,UAAU,GAAGO,YAAY,CAACP,UAAb,CAAwBM,GAAxB,CAA4BE,SAAS,IAAI;AACxD,YAAMC,OAAO,GAAGX,QAAQ,CAACY,IAAT,CAAcD,OAAO,IAAI;AACrC,eAAOA,OAAO,CAACE,EAAR,KAAeH,SAAtB;AACH,OAFe,CAAhB;AAGA,YAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,SAA1C;AACAK,MAAAA,KAAK,CAAC,UAAQD,IAAT,CAAL;AACA,aAAO;AAAED,QAAAA,EAAE,EAACH,SAAL;AAAgBI,QAAAA;AAAhB,OAAP;AACH,KAPkB,CAAnB;AAQA,WAAO,EAAE,GAAGL,YAAL;AAAmBP,MAAAA;AAAnB,KAAP;AACH,GAV8B,CAA/B;AAYA,QAAMc,KAAK,GAAG;AACVlB,IAAAA,aAAa,EAAES,sBADL;AAEVN,IAAAA;AAFU,GAAd;AAIA,sBACI,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEe,KAAtC;AAAA,cACKnB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;IAhCeD,qB;UAC8BL,c,EACrBC,W;;;KAFTI,qB","sourcesContent":["import React, { useContext } from 'react'\r\n//import Contacts from '../components/Contacts'\r\nimport useLocalSorage from '../hooks/useLocalStorage'\r\nimport { useContacts } from './ContactsProvider'\r\n\r\nconst ConversationsContext = React.createContext()\r\n\r\nexport function useConversations() {\r\n    return useContext(ConversationsContext)\r\n}\r\n\r\nexport function ConversationsProvider({ children }) {\r\n    const [conversations, setConversations] = useLocalSorage('conversations', [])\r\n    const { contacts } = useContacts()\r\n\r\n    function createConversation(recipients) {\r\n        setConversations(prevConversations => {\r\n            return [...prevConversations, { recipients, messages: [] }]\r\n        })\r\n    }\r\n    \r\n    console.log(typeof(conversations))\r\n    const formattedConversations = conversations.map(conversation => {\r\n        const recipients = conversation.recipients.map(recipient => {\r\n            const contact = contacts.find(contact => {\r\n                return contact.id === recipient\r\n            })\r\n            const name = (contact && contact.name) || recipient\r\n            alert('name:'+name)\r\n            return { id:recipient, name }\r\n        })\r\n        return { ...conversation, recipients }\r\n    })\r\n\r\n    const value = {\r\n        conversations: formattedConversations,\r\n        createConversation\r\n    }\r\n    return (\r\n        <ConversationsContext.Provider value={value}>\r\n            {children}\r\n        </ConversationsContext.Provider>\r\n    )\r\n}\r\n "]},"metadata":{},"sourceType":"module"}